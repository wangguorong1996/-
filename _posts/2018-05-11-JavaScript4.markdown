---
layout:     post
title:      "JavaScript高级程序设计（四)"
subtitle:   "学习笔记"          
date:       2018-05-11 10:27:00
author:     "GR"
header-img: "img/post-bg-javascript1.jpg"
tags:
    - 笔记
    - js
    - JavaScript
---
> 转载请标明出处。<br><br>

# 第4章 变量、作用域和内存问题

## 基本类型与引用类型的值
<ul>
	<li>ECMAScript变量可能包含两种不同数据类型的值：
		<ul>
			<li>基本类型值，简单的数据段。复制变量值后，创建了一个副本，两变量完全独立</li>
			<li>引用类型值，可能由多个值构成的对象。复制变量值其实是复制指针，两个变量引用同一个对象。变量包含的不是对象而是指向该对象的指针</li>
		</ul>
	</li>
	<li>typeof操作符，检测一个变量是字符串、数值、布尔值还是undefined,如果是对象或者null则返回object</li>
	<li>instanceof操作符，如果变量是给定引用类型（Object、Array、RegExp）的实例则返回true</li>
</ul>

## 执行环境（作用域）
<ul>
	<li>执行环境的类型：全局执行环境和局部（函数执行环境）</li>
	<li>每个环境都可以向上搜索作用域链以查询任何变量和函数，但任何环境不能向下搜索作用域链而进入另一个执行环境。</li>
	<li>当执行流进入try-catch语句的catch块、with语句时，作用域链得到加长。</li>
	<li>某个环境为了读取或写入而引用一个标识符时，通过从作用域前端开始向上逐级查询匹配的标识符，直到找到，找不到意味着该变量未声明</li>
</ul>

## 垃圾收集
<ul>
	<li>垃圾收集机制：按照预定的收集时间，找出不再继续使用的变量然后释放其占用的内存，完全自动管理。</li>
	<li>标识无用变量的策略：</li>
		<ul>
			<li>标记清除:垃圾收集器在运行时会给内存中所有变量都加上标记，然后去掉环境中的变量和被环境中变量引用的变量的标记，被加上标记的变量被视为准备删除的变量</li>
			<li>引用计数:声明或引用则引用次数是1，清除计数为0的值所占用的内存</li>
		</ul>
	<li>通过将值设置为null来释放引用--接触引用，让值脱离执行环境，以便垃圾收集器下次运行时回收。</li>
	
</ul>






